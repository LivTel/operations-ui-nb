/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ngat.opsgui.xcomp;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Point;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.SimpleTimeZone;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import ngat.astrometry.BasicSite;
import ngat.astrometry.BasicTargetCalculator;
import ngat.astrometry.BasicTargetTrackCalculatorFactory;
import ngat.astrometry.ISite;
import ngat.astrometry.JAstroSlalib;
import ngat.astrometry.SkyBrightnessCalculator;
import ngat.astrometry.TargetTrackCalculator;
import ngat.astrometry.components.RotatorMountTimePanel;
import ngat.astrometry.components.RotatorSkyTimePanel;
import ngat.phase2.IAcquisitionConfig;
import ngat.phase2.IAutoguiderConfig;
import ngat.phase2.IExecutionFailureContext;
import ngat.phase2.IExecutiveAction;
import ngat.phase2.IInstrumentConfig;
import ngat.phase2.IIteratorCondition;
import ngat.phase2.IProgram;
import ngat.phase2.IProposal;
import ngat.phase2.IRotatorConfig;
import ngat.phase2.ISequenceComponent;
import ngat.phase2.ITag;
import ngat.phase2.ITarget;
import ngat.phase2.ITimingConstraint;
import ngat.phase2.IUser;
import ngat.phase2.XAcquisitionConfig;
import ngat.phase2.XAirmassConstraint;
import ngat.phase2.XArc;
import ngat.phase2.XAutoguiderConfig;
import ngat.phase2.XBranchComponent;
import ngat.phase2.XExecutiveComponent;
import ngat.phase2.XFixedTimingConstraint;
import ngat.phase2.XFlexibleTimingConstraint;
import ngat.phase2.XFocusOffset;
import ngat.phase2.XHourAngleConstraint;
import ngat.phase2.XInstrumentConfigSelector;
import ngat.phase2.XIteratorComponent;
import ngat.phase2.XIteratorRepeatCountCondition;
import ngat.phase2.XMinimumIntervalTimingConstraint;
import ngat.phase2.XMonitorTimingConstraint;
import ngat.phase2.XMultipleExposure;
import ngat.phase2.XPeriodExposure;
import ngat.phase2.XPeriodRunAtExposure;
import ngat.phase2.XPhotometricityConstraint;
import ngat.phase2.XPositionOffset;
import ngat.phase2.XProposal;
import ngat.phase2.XRotatorConfig;
import ngat.phase2.XSeeingConstraint;
import ngat.phase2.XSkyBrightnessConstraint;
import ngat.phase2.XSlew;
import ngat.phase2.XTarget;
import ngat.sms.ExecutionResource;
import ngat.sms.ExecutionResourceBundle;
import ngat.sms.ExecutionResourceUsageEstimationModel;
import ngat.sms.GroupItem;
import ngat.sms.ObservingConstraintAdapter;
import ngat.sms.bds.TestResourceUsageEstimator;
import ngat.util.BooleanLock;

/**
 *
 * @author eng
 */
public class GroupDisplayPanel extends javax.swing.JPanel {

    private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

    private static SimpleTimeZone UTC = new SimpleTimeZone(0, "UTC");

    private DefaultMutableTreeNode root;

    private DefaultTreeModel stm;

    private ExecutionResourceUsageEstimationModel xrm;

    private ProgressMonitorThread pmt;

    private long groupexec; // track exec time of current group

    /**
     * Creates new form GroupDisplayPanel
     */
    public GroupDisplayPanel() {
        sdf.setTimeZone(UTC);
        xrm = new TestResourceUsageEstimator();
        pmt = new ProgressMonitorThread();
        pmt.start();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        proposalField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        programField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        tagField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        userField = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        categoryField = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        timingClassField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        timingStartField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        timingEndField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        timingPeriodField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        airmassField = new javax.swing.JTextField();
        extinctionField = new javax.swing.JTextField();
        skyField = new javax.swing.JTextField();
        haField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        seeingField = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sequenceTree = createSequenceTree();
        jPanel5 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        execStartField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        execTimePredictionField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        predictedTimeToRunField = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        jLabel27 = new javax.swing.JLabel();
        statusField = new javax.swing.JTextField();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Identity", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.blue));

        jLabel1.setText("Name");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Proposal");

        jLabel3.setText("in");

        jLabel4.setText("Tag");

        jLabel5.setText("User");

        jLabel26.setText("Cat");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(proposalField, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(programField, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nameField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tagField, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel26)
                        .addGap(18, 18, 18)
                        .addComponent(categoryField, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(proposalField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(programField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tagField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel26)
                    .addComponent(categoryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Timing", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.blue));

        jLabel6.setText("Class");

        jLabel7.setText("Start");

        jLabel8.setText("End");

        jLabel9.setText("Period");

        timingPeriodField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timingPeriodFieldActionPerformed(evt);
            }
        });

        jLabel15.setText("UTC");

        jLabel16.setText("UTC");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(timingClassField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timingEndField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(timingStartField, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(4, 4, 4)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)))
                    .addComponent(timingPeriodField, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(timingClassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timingStartField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timingEndField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timingPeriodField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Constraints", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.blue));

        jLabel10.setText("Airmass");

        jLabel12.setText("Extinction");

        jLabel13.setText("Sky");

        jLabel14.setText("HA");

        extinctionField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extinctionFieldActionPerformed(evt);
            }
        });

        jLabel17.setText("as");

        jLabel11.setText("Seeing");

        jLabel28.setText("mags");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(airmassField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seeingField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extinctionField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(skyField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(haField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(jLabel28))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(airmassField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seeingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extinctionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(skyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel28))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(haField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sequence", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.blue));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        sequenceTree.setModel(createSequenceTreeModel());
        sequenceTree.setCellRenderer(createSequenceRenderer());
        sequenceTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treeNodeClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                treeMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(sequenceTree);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Progress", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.blue));

        jLabel19.setText("Started");

        execStartField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                execStartFieldActionPerformed(evt);
            }
        });

        jLabel20.setText("UTC");

        jLabel21.setText("Predicted");

        jLabel22.setText("s");

        jLabel23.setText("ETTR.");

        jLabel24.setText("s");

        jLabel18.setText("Progress");

        progressBar.setForeground(new java.awt.Color(125, 125, 246));

        jLabel27.setText("Status");

        statusField.setForeground(java.awt.Color.blue);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel25)
                .addGap(22, 22, 22))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel19, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel27, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(execTimePredictionField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel22)
                                .addGap(10, 10, 10)
                                .addComponent(jLabel23)
                                .addGap(47, 47, 47))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(execStartField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(predictedTimeToRunField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                                .addGap(3, 3, 3)))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel24)))
                    .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(execStartField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(execTimePredictionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22)
                    .addComponent(predictedTimeToRunField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel21)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void timingPeriodFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timingPeriodFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timingPeriodFieldActionPerformed

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void extinctionFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extinctionFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_extinctionFieldActionPerformed

    private void execStartFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_execStartFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_execStartFieldActionPerformed

    private void treeNodeClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeNodeClicked

        Point p = evt.getPoint();
        int x = (int) p.getX();
        int y = (int) p.getY();
        int cc = evt.getClickCount();

        System.err.println("Tree node clicked x: " + x + " y: " + y + " cc: " + cc);
        System.err.println("event: " + evt);

        if (evt.isPopupTrigger()) {
            showPopup(x, y); // content of popup will depend on type of node
        }

        if (cc == 2) {
            TreePath path = sequenceTree.getClosestPathForLocation(x, y);
            DefaultMutableTreeNode selectedNode
                    = ((DefaultMutableTreeNode) path.getLastPathComponent());
            Object uo = selectedNode.getUserObject();
            System.err.println("Selected uo isa: " + uo.getClass().getName());
            if (uo instanceof XExecutiveComponent) {
                XExecutiveComponent exec = (XExecutiveComponent) uo;
                IExecutiveAction action = exec.getExecutiveAction();
                if (action instanceof XSlew) {
                    XSlew slew = (XSlew) action;
                    XTarget target = (XTarget) slew.getTarget();
                    XRotatorConfig rot = (XRotatorConfig) slew.getRotatorConfig();

                    int rotmode = rot.getRotatorMode();

                    System.err.println("UO is a slew ... create Rotator popup panel: " + XRotatorConfig.getRotatorModeName(rotmode));

                    // popup rot panel
                    ISite site = new BasicSite("", Math.toRadians(28), Math.toRadians(155));
                    JPanel rotp = null;
                    if (rotmode == IRotatorConfig.CARDINAL || rotmode == IRotatorConfig.SKY) {
                        rotp = new RotatorSkyTimePanel(site, new JAstroSlalib(), new BasicTargetTrackCalculatorFactory(), Math.toRadians(55.0));
                    } else if (rotmode == IRotatorConfig.MOUNT) {
                        rotp = new RotatorMountTimePanel(site, new JAstroSlalib(), new BasicTargetTrackCalculatorFactory(), Math.toDegrees(55.0));
                    }

                    JFrame f = new JFrame("Rotator feasibility for: " + target.getName() + " Dt: " + (groupexec / 3600000) + "h");
                    f.getContentPane().setLayout(new BorderLayout());
                    f.getContentPane().add(rotp);
                    f.pack();
                    f.setBounds(500, 400, 600, 400);
                    f.setVisible(true);

                    final TargetTrackCalculator track = new BasicTargetCalculator(target, site);

                    if (rotmode == IRotatorConfig.CARDINAL || rotmode == IRotatorConfig.SKY) {
                        final RotatorSkyTimePanel skyp = (RotatorSkyTimePanel) rotp;

                        SwingUtilities.invokeLater(new Runnable() {

                            public void run() {
                                skyp.update(track, System.currentTimeMillis(), System.currentTimeMillis() + 12 * 3600 * 1000L, groupexec);
                            }
                        });
                    } else if (rotmode == IRotatorConfig.MOUNT) {

                        final RotatorMountTimePanel moup = (RotatorMountTimePanel) rotp;

                        SwingUtilities.invokeLater(new Runnable() {

                            public void run() {
                                moup.update(track, System.currentTimeMillis(), System.currentTimeMillis() + 12 * 3600 * 1000L, groupexec);
                            }
                        });
                    }

                }
            }
        }


    }//GEN-LAST:event_treeNodeClicked

    private void treeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeMousePressed
        Point p = evt.getPoint();
        int x = (int) p.getX();
        int y = (int) p.getY();
        int cc = evt.getClickCount();

        System.err.println("Tree node clicked x: " + x + " y: " + y + " cc: " + cc);
        System.err.println("event: " + evt);

        if (evt.isPopupTrigger()) {
            showPopup(x, y); // content of popup will depend on type of node
        }
    }//GEN-LAST:event_treeMousePressed

    private void showPopup(int x, int y) {
        TreePath path = sequenceTree.getClosestPathForLocation(x, y);
        DefaultMutableTreeNode selectedNode
                = ((DefaultMutableTreeNode) path.getLastPathComponent());
        Object uo = selectedNode.getUserObject();
        System.err.println("Popup for uo isa: " + uo.getClass().getName());
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField airmassField;
    private javax.swing.JTextField categoryField;
    private javax.swing.JTextField execStartField;
    private javax.swing.JTextField execTimePredictionField;
    private javax.swing.JTextField extinctionField;
    private javax.swing.JTextField haField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameField;
    private javax.swing.JTextField predictedTimeToRunField;
    private javax.swing.JTextField programField;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextField proposalField;
    private javax.swing.JTextField seeingField;
    private javax.swing.JTree sequenceTree;
    private javax.swing.JTextField skyField;
    private javax.swing.JTextField statusField;
    private javax.swing.JTextField tagField;
    private javax.swing.JTextField timingClassField;
    private javax.swing.JTextField timingEndField;
    private javax.swing.JTextField timingPeriodField;
    private javax.swing.JTextField timingStartField;
    private javax.swing.JTextField userField;
    // End of variables declaration//GEN-END:variables

    private TreeModel createSequenceTreeModel() {
        root = new DefaultMutableTreeNode("root");
        stm = new DefaultTreeModel(root);

        System.err.println("Created STM: " + stm);
        return stm;

    }

    private JTree createSequenceTree() {
        System.err.println("Creating a tree using: STM: " + stm);
        JTree tree = new JTree(stm);
        return tree;

    }

    public void notifyGroupStarted(GroupItem group) {

        // Id section
        nameField.setText(group.getName());
        IProposal proposal = group.getProposal();
        proposalField.setText(proposal != null ? proposal.getName() : "UNKNOWN");
        IProgram program = group.getProgram();
        programField.setText(program != null ? program.getName() : "UNKNOWN");
        ITag tag = group.getTag();
        tagField.setText(tag != null ? tag.getName() : "UNKNOWN");
        IUser user = group.getUser();
        userField.setText(user != null ? user.getName() : "UNKNOWN");

        // Cat field
        String catText = (group.isUrgent() ? "*" : "");
        switch (proposal.getPriority()) {
            case IProposal.PRIORITY_A:
                catText += "A";
                break;
            case IProposal.PRIORITY_B:
                catText += "B";
                break;
            case IProposal.PRIORITY_C:
                catText += "C";
                break;
            case IProposal.PRIORITY_Z:
                catText += "Z";
                break;
        }
        if (proposal.getPriorityOffset() > 0.0) {
            catText += "+";
        }
        categoryField.setText(catText);

        // Timing section
        ITimingConstraint timing = group.getTimingConstraint();
        if (timing == null) {
            timingClassField.setText("none");
        } else {

            displayTiming(timing);

            // and the rest
        }

        // Constraint section
        ObservingConstraintAdapter oca = new ObservingConstraintAdapter(group);
        XAirmassConstraint air = oca.getAirmassConstraint();
        airmassField.setText(air != null ? " < " + air.getMaximumAirmass() : "dome-limit");

        XSeeingConstraint see = oca.getSeeingConstraint();
        seeingField.setText(see != null ? " < " + see.getSeeingValue() : "unrestricted");

        XPhotometricityConstraint phot = oca.getPhotometricityConstraint();
        extinctionField.setText(phot != null ? XPhotometricityConstraint.getPhotometricityCategoryName(phot.getPhotometricityCategory()) : "unrestricted");

        XSkyBrightnessConstraint sky = oca.getSkyBrightnessConstraint();
        skyField.setText(sky != null ? " < " + SkyBrightnessCalculator.getSkyBrightness(sky.getSkyBrightnessCategory()) : "unrestricted");

        XHourAngleConstraint ha = oca.getHourAngleConstraint();
        haField.setText(ha != null ? "" + Math.toDegrees(ha.getMinimumHourAngle() / 15) + " < ha < " + Math.toDegrees(ha.getMaximumHourAngle() / 15) : "unrestricted");

        // sequence section
        ISequenceComponent sroot = group.getSequence();

        // System.err.println("Tree uses model: " + sequenceTree.getModel());
        DefaultMutableTreeNode myroot = createTree(sroot);
        stm.setRoot(myroot);

        // progress section
        ExecutionResourceBundle resources = xrm.getEstimatedResourceUsage(group);
        ExecutionResource timeResource = resources.getResource("TIME");
        double exec = timeResource.getResourceUsage();
        long execStartTime = System.currentTimeMillis();

        groupexec = (long) exec;

        execStartField.setText(sdf.format(new Date(execStartTime)));
        int execSecs = (int) (exec / 1000);
        execTimePredictionField.setText(String.format("%4d", execSecs));
        predictedTimeToRunField.setText(String.format("%4d", execSecs));

        progressBar.setMaximum((int) (exec / 1000));
        progressBar.setValue(0);
        progressBar.setIndeterminate(false);

        statusField.setText("Running...");
        statusField.setBackground(Color.green);

        pmt.release((long) execStartTime, (long) exec);

    }

    public void notifyGroupCompleted(GroupItem group) {
        statusField.setText("Completed");
        statusField.setBackground(Color.green);
        pmt.quit();
    }

    public void notifyGroupFailed(GroupItem group, IExecutionFailureContext error) {
        statusField.setText("Failed: " + error.getErrorCode());
        statusField.setBackground(Color.red);
        pmt.quit();
    }

    private DefaultMutableTreeNode createTree(ISequenceComponent seq) {

        DefaultMutableTreeNode node = null;

        if (seq instanceof XIteratorComponent) {

            XIteratorComponent iter = (XIteratorComponent) seq;

            node = new DefaultMutableTreeNode(iter);

            List children = iter.listChildComponents();
            for (int is = 0; is < children.size(); is++) {
                ISequenceComponent child = (ISequenceComponent) children.get(is);
                node.add(createTree(child));
            }

        } else if (seq instanceof XBranchComponent) {

            XBranchComponent branch = (XBranchComponent) seq;

            node = new DefaultMutableTreeNode(branch);

            List children = branch.listChildComponents();
            for (int is = 0; is < children.size(); is++) {
                ISequenceComponent child = (ISequenceComponent) children.get(is);
                node.add(createTree(child));
            }

        } else {
            XExecutiveComponent exec = (XExecutiveComponent) seq;

            // create a node with descriptive text not just the seq-comp-name.
            node = new DefaultMutableTreeNode(exec);

        }

        return node;

    }

    private TreeCellRenderer createSequenceRenderer() {

        SequenceRenderer renderer = new SequenceRenderer();
        return renderer;

    }

    private void displayTiming(ITimingConstraint timing) {

        timingStartField.setText(sdf.format(new Date(timing.getStartTime())));
        timingEndField.setText(sdf.format(new Date(timing.getEndTime())));

        if (timing instanceof XFlexibleTimingConstraint) {
            timingClassField.setText("Flexible");
        } else if (timing instanceof XFixedTimingConstraint) {
            timingClassField.setText("Fixed");
        } else if (timing instanceof XMonitorTimingConstraint) {
            XMonitorTimingConstraint xmon = (XMonitorTimingConstraint) timing;
            timingClassField.setText("Monitor");
            timingPeriodField.setText("" + (xmon.getPeriod() / 3600000) + "h");
        } else if (timing instanceof XMinimumIntervalTimingConstraint) {
            timingClassField.setText("Interval");
        }
    }

    private static class SequenceRenderer extends DefaultTreeCellRenderer {

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {
            super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);

            DefaultMutableTreeNode node = (DefaultMutableTreeNode) value;

            Object uo = node.getUserObject();

            if (uo instanceof XIteratorComponent) {

                XIteratorComponent iter = (XIteratorComponent) uo;
                IIteratorCondition cond = iter.getCondition();
                String countStr = "";
                if (cond instanceof XIteratorRepeatCountCondition) {
                    int count = ((XIteratorRepeatCountCondition) cond).getCount();
                    if (count > 1) {
                        countStr = " x" + count;
                    }
                }
                setText("Iter: " + iter.getComponentName() + countStr);

            } else if (uo instanceof XBranchComponent) {

                XBranchComponent branch = (XBranchComponent) uo;
                setText("Branch:" + branch.getComponentName());

            } else if (uo instanceof XExecutiveComponent) {

                XExecutiveComponent exec = (XExecutiveComponent) uo;
                IExecutiveAction action = exec.getExecutiveAction();

                if (action instanceof XSlew) {
                    XSlew xslew = (XSlew) action;
                    ITarget target = xslew.getTarget();
                    IRotatorConfig rotator = xslew.getRotatorConfig();
                    String rotsrc = null;
                    switch (rotator.getRotatorMode()) {
                        case IRotatorConfig.CARDINAL:
                            rotsrc = "CARDINAL(" + rotator.getInstrumentName() + ")";
                            break;
                        case IRotatorConfig.SKY:
                            rotsrc = "SKY(" + rotator.getInstrumentName() + ":" + String.format("%4.2f", Math.toDegrees(rotator.getRotatorAngle()));
                            break;
                        case IRotatorConfig.MOUNT:
                            rotsrc = String.format("%4.2f", Math.toDegrees(rotator.getRotatorAngle()));
                            break;
                        default:
                            rotsrc = XRotatorConfig.getRotatorModeName(rotator.getRotatorMode());
                            break;
                    }
                    setText("Slew: " + target.getName() + " Rotator: " + rotsrc);
                } else if (action instanceof XInstrumentConfigSelector) {
                    XInstrumentConfigSelector xcfg = (XInstrumentConfigSelector) action;
                    IInstrumentConfig cfg = xcfg.getInstrumentConfig();
                    setText("Config: " + cfg.getInstrumentName() + ":" + cfg.getName());
                } else if (action instanceof XMultipleExposure) {
                    XMultipleExposure mult = (XMultipleExposure) action;
                    setText("MultrunExp: " + mult.getRepeatCount() + "x" + (mult.getExposureTime() / 1000));
                } else if (action instanceof XPeriodExposure) {
                    XPeriodExposure xper = (XPeriodExposure) action;
                    setText("PeriodExp: " + (xper.getExposureTime() / 1000));
                } else if (action instanceof XPeriodRunAtExposure) {
                    XPeriodRunAtExposure timed = (XPeriodRunAtExposure) action;
                    setText("TimedExp: " + (timed.getExposureLength() / 1000) + " over " + (timed.getTotalExposureDuration() / 1000));
                } else if (action instanceof XAcquisitionConfig) {
                    XAcquisitionConfig acq = (XAcquisitionConfig) action;
                    int mode = acq.getMode();
                    if (mode == IAcquisitionConfig.INSTRUMENT_CHANGE) {
                        setText("Aperture: " + acq.getTargetInstrumentName());
                    } else {

                        if (mode == IAcquisitionConfig.BRIGHTEST) {
                            setText("Acquire: Brightest: " + acq.getAcquisitionInstrumentName() + " -> " + acq.getTargetInstrumentName());
                        } else if (mode == IAcquisitionConfig.WCS_FIT) {
                            setText("Acquire: WcsFit: " + acq.getAcquisitionInstrumentName() + " -> " + acq.getTargetInstrumentName());
                        }
                    }
                } else if (action instanceof XAutoguiderConfig) {
                    XAutoguiderConfig auto = (XAutoguiderConfig) action;
                    int mode = auto.getAutoguiderCommand();
                    String modeStr = null;
                    switch (mode) {
                        case IAutoguiderConfig.OFF:
                            modeStr = "OFF";
                            break;
                        case IAutoguiderConfig.ON:
                            modeStr = "ON (mand)";
                            break;
                        case IAutoguiderConfig.ON_IF_AVAILABLE:
                            modeStr = "ON (opt)";
                            break;
                        /// OR USE XAutoguiderConfig.toModeString(mode)
                    }
                    // setText("AUTO: " + auto.getAutoguiderName() + " " + modeStr);
                    setText("Autoguide: " + modeStr);
                } else if (action instanceof XPositionOffset) {
                    XPositionOffset xpoff = (XPositionOffset) action;
                    double raoff = xpoff.getRAOffset(); // rad/sec
                    double decoff = xpoff.getDecOffset(); // rad/sec
                    boolean relative = xpoff.isRelative();

                    setText((relative ? "Rel_" : "Abs_") + "Offset: ("
                            + String.format("%.2f", Math.toDegrees(raoff) * 3600.0) + ", "
                            + String.format("%.2f", Math.toDegrees(decoff) * 3600.0) + ")");
                } else if (action instanceof XFocusOffset) {
                    XFocusOffset foc = (XFocusOffset) action;
                    double foff = foc.getOffset();
                    boolean relative = foc.isRelative();
                    setText((relative ? "Rel_" : "Abs_") + "Defocus: " + String.format("%4.2f", foff) + " mm");
                } else if (action instanceof XArc) {
                    XArc arc = (XArc) action;
                    setText("Arc: " + arc.getLamp().getLampName());
                } else {
                    setText(exec.getComponentName());
                }
            }
            return this;

        }

    }

    private class ProgressMonitorThread extends Thread {

        BooleanLock release = new BooleanLock(false);

        volatile long startTime;
        volatile long duration;
        volatile boolean completed = false;

        long t = 0;

        ProgressMonitorThread() {
            super();
        }

        public void run() {

            while (true) {

                // wait till released
                try {
                    // System.err.println("ProgMonitor: waiting for release...");
                    release.waitUntilTrue(0);
                } catch (Exception e) {
                }
                System.err.println("ProgMonitor: Start updating for: " + duration);

                // keep looping for a while until hit limit
                // TODO - we need to be able to reset this loop if another group comes in before we expect to have hasCompleted..
                // and also to allow a group hasCompleted message to be correctly handled
                t = 0;
                while (t < duration && (!completed)) { // t is in seconds
                    long trem = startTime + duration - System.currentTimeMillis();
                    predictedTimeToRunField.setText("" + (trem / 1000));
                    progressBar.setValue((int) (t / 1000));
                    // System.err.println("ProgMonitor: Update with value: " + (int) (t / 1000));
                    t += 10000;
                    try {
                        Thread.sleep(10000L);
                    } catch (Exception e) {
                    }
                }
            }

        }

        public void release(long startTime, long duration) {
            // System.err.println("ProgMonitor:call release(" + duration + ")");
            try {
                this.startTime = startTime;
                this.duration = duration;
                completed = false;
                release.setValue(true);
            } catch (Exception e) {
            }
        }

        public void quit() {
            // System.err.println("ProgMonitor:call quit()");
            try {
                completed = true;
                release.setValue(false);
                interrupt();
            } catch (Exception e) {
            }
        }

    }

}
